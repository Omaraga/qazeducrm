<?php

namespace app\models\forms;

use app\components\PhoneNumberValidator;
use app\helpers\OrganizationRoles;
use app\models\Organizations;
use app\models\relations\TariffSubject;
use app\models\relations\UserOrganization;
use app\models\Subject;
use app\models\User;
use app\models\Tariff;
use yii\db\Expression;
use yii\helpers\ArrayHelper;

class TariffForm extends \yii\base\Model
{
    public $id;
    public $name;
    public $status;
    public $duration;
    public $lesson_amount;
    public $type;
    public $price;
    public $description;
    public $subjects;


    public function rules()
    {
        return [
            [['name', 'description'], 'string'],
            [['status', 'duration', 'lesson_amount', 'type', 'price'], 'integer'],
            [['duration', 'type', 'name'], 'required'],
            [['subjects', 'name', 'description', 'duration', 'lesson_amount', 'type', 'price'], 'safe'],
            [['lesson_amount'], 'integer', 'min' => 0, 'when' => function($model){
                return $model->duration === 3;
            }]
        ];
    }

    public function init()
    {
        $this->loadDefaultValues();
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function loadDefaultValues(){
        if ($id = \Yii::$app->request->get('id')){
            $tariff = \app\models\Tariff::findOne($id);
            $this->id = $tariff->id;
            $this->name = $tariff->name;
            $this->status = $tariff->status;
            $this->duration = $tariff->duration;
            $this->lesson_amount = $tariff->lesson_amount;
            $this->type = $tariff->type;
            $this->price = $tariff->price;
            $this->description = $tariff->description;
            $this->subjects = $tariff->subjectsRelation ? : [];
        }
    }

    public function save(){
        if (!$this->validate()){
            return  false;
        }

        $transaction = \Yii::$app->db->beginTransaction();
        if ($this->id){
            $model = Tariff::findOne($this->id);
        }else{
            $model = new Tariff();
        }
        $model->attributes = $this->attributes;
        if (!$model->save()){
            $transaction->rollBack();
            return false;
        }
        $createdTariffSubjectIds = [];
        foreach ($this->subjects as $item){
            $tariffSubject = new TariffSubject();
            $tariffSubject->tariff_id = $model->id;
            $tariffSubject->subject_id = $item['subject_id'];
            $tariffSubject->lesson_amount = $item['lesson_amount'];
            if (!$tariffSubject->save()){
                $transaction->rollBack();
                return false;
            }
            $createdTariffSubjectIds[] = $tariffSubject->id;
        }
        $transaction->commit();
        $forDeleteTariffSubjects = TariffSubject::find()->where(['not in', 'id', $createdTariffSubjectIds])->andWhere(['tariff_id' => $model->id])->all();
        foreach ($forDeleteTariffSubjects as $deleteTariffSubject){
            $deleteTariffSubject->delete();
        }
        $this->id = $model->id;

        return true;
    }
    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Наименование',
            'status' => 'Статус',
            'statusLabel' => 'Статус',
            'duration' => 'Продолжительность',
            'durationLabel' => 'Продолжительность',
            'lesson_amount' => 'Кол-во занятий',
            'type' => 'Тип тарифа',
            'typeLabel' => 'Тип тарифа',
            'price' => 'Стоимость',
            'description' => 'Описание',
            'info' => 'Info',
        ];
    }



}