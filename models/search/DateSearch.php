<?php

namespace app\models\search;

use app\components\ActiveRecord;
use app\helpers\OrganizationRoles;
use app\models\Lesson;
use app\models\LessonAttendance;
use app\models\User;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\models\Payment;

/**
 * PaymentSearch represents the model behind the search form of `app\models\Payment`.
 */
class DateSearch extends Model
{
    public $date;
    public $query;
    public $date_start;
    public $date_end;
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['date'], 'safe'],
        ];
    }

    public function __construct($query = null, $config = [])
    {
        $this->query = $query;
        $this->date = date('d.m.Y');
        parent::__construct($config);
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = $this->query;

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 20
            ],
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        $this->date_start = '01'.substr($this->date, 2);
        $this->date_end = date('t',strtotime($this->date)).'.'.substr($this->date, 3);
        if ($this->date_start){
            $query->andFilterWhere(['>=', 'date', date('Y-m-d H:i', strtotime($this->date_start))]);
        }


        return $dataProvider;
    }

    public function searchEmployer($params){
        $this->load($params);

        $dateTeacherSalary = [];


        if (!$this->validate()) {
            return $dateTeacherSalary;
        }

        $this->date_start = '01'.substr($this->date, 2);
        $this->date_end = date('t',strtotime($this->date)).'.'.substr($this->date, 3);
        $teachers = User::find()->innerJoinWith(['currentUserOrganizations' => function($q){
            $q->andWhere(['<>','user_organization.is_deleted', ActiveRecord::DELETED])->andWhere(['in', 'user_organization.role', [OrganizationRoles::TEACHER]]);
        }])->all();
        for ($iDateTime = strtotime($this->date_start); $iDateTime <= strtotime($this->date_end); $iDateTime += 24 * 60 * 60){
            $date = date('d.m.Y', $iDateTime);
            foreach ($teachers as $teacher){
                $dateTeacherSalary[$date][$teacher->id] = 0;
            }

        }
        $lessonAttendances = LessonAttendance::find()->innerJoinWith(['lesson' => function($q){
            $q->andWhere(['<>', 'lesson.is_deleted', 1]);
        }])->andWhere(['>=','lesson.date', date('Y-m-d', strtotime($this->date_start))])
            ->andWhere(['<=','lesson.date', date('Y-m-d', strtotime($this->date_end))])->all();


    }

    public function attributeLabels()
    {
        return [
            'date' => \Yii::t('main', 'Дата'),
        ]; // TODO: Change the autogenerated stub
    }
}
