<?php

namespace app\models\search;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\models\Payment;

/**
 * PaymentSearch represents the model behind the search form of `app\models\Payment`.
 */
class PaymentSearch extends Model
{
    public $date_start;
    public $date_end;
    public $type;
    public $sum = 0;

    public function __construct($config = [])
    {
        $this->date_start = date('d.m.Y');
        $this->date_end = date('d.m.Y');
        parent::__construct($config);
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['date_start', 'date_end', 'type'], 'safe'],
        ];
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Payment::find()->byOrganization()->orderBy('date DESC');

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 30
            ],
        ]);


        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        if ($this->date_start){
            $query->andFilterWhere(['>=', 'date', date('Y-m-d H:i', strtotime($this->date_start))]);
        }
        if ($this->date_end){
            $query->andFilterWhere(['<', 'date', date('Y-m-d H:i', strtotime($this->date_end) + 24 * 60 * 60)]);
        }

        if ($this->type && $this->type > 0){
            $query->andFilterWhere(['type' => $this->type]);
        }
        $cloneQuery = clone $query;

        $payments = $cloneQuery->select('amount, type')->asArray()->all();
        foreach ($payments as $payment){
            if ($payment['type'] == Payment::TYPE_PAY){
                $this->sum += $payment['amount'];
            }else{
                $this->sum -= $payment['amount'];
            }
        }


        return $dataProvider;
    }

    public function attributeLabels()
    {
        return [
            'date_end' => \Yii::t('main', 'Период по'),
            'date_start' => \Yii::t('main', 'Период с'),
            'type' => \Yii::t('main', 'Тип платежа'),
        ]; // TODO: Change the autogenerated stub
    }
}
